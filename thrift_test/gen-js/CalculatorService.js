//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ThriftCalc.CalculatorService_ping_args = function(args) {
};
ThriftCalc.CalculatorService_ping_args.prototype = {};
ThriftCalc.CalculatorService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftCalc.CalculatorService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftCalc.CalculatorService_ping_result = function(args) {
};
ThriftCalc.CalculatorService_ping_result.prototype = {};
ThriftCalc.CalculatorService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftCalc.CalculatorService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftCalc.CalculatorService_plus_args = function(args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
ThriftCalc.CalculatorService_plus_args.prototype = {};
ThriftCalc.CalculatorService_plus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num1 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.num2 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftCalc.CalculatorService_plus_args.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_plus_args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I32, 1);
    output.writeI32(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I32, 2);
    output.writeI32(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftCalc.CalculatorService_plus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftCalc.CalculatorService_plus_result.prototype = {};
ThriftCalc.CalculatorService_plus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftCalc.CalculatorService_plus_result.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_plus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftCalc.CalculatorService_minus_args = function(args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
ThriftCalc.CalculatorService_minus_args.prototype = {};
ThriftCalc.CalculatorService_minus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.num1 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.num2 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftCalc.CalculatorService_minus_args.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_minus_args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I32, 1);
    output.writeI32(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I32, 2);
    output.writeI32(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftCalc.CalculatorService_minus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftCalc.CalculatorService_minus_result.prototype = {};
ThriftCalc.CalculatorService_minus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftCalc.CalculatorService_minus_result.prototype.write = function(output) {
  output.writeStructBegin('CalculatorService_minus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftCalc.CalculatorServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ThriftCalc.CalculatorServiceClient.prototype = {};
ThriftCalc.CalculatorServiceClient.prototype.ping = function(callback) {
  if (callback === undefined) {
    this.send_ping();
    this.recv_ping();
  } else {
    var postData = this.send_ping(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ping);
  }
};

ThriftCalc.CalculatorServiceClient.prototype.send_ping = function(callback) {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftCalc.CalculatorService_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ThriftCalc.CalculatorServiceClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ThriftCalc.CalculatorService_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
ThriftCalc.CalculatorServiceClient.prototype.plus = function(num1, num2, callback) {
  if (callback === undefined) {
    this.send_plus(num1, num2);
    return this.recv_plus();
  } else {
    var postData = this.send_plus(num1, num2, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_plus);
  }
};

ThriftCalc.CalculatorServiceClient.prototype.send_plus = function(num1, num2, callback) {
  this.output.writeMessageBegin('plus', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftCalc.CalculatorService_plus_args();
  args.num1 = num1;
  args.num2 = num2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ThriftCalc.CalculatorServiceClient.prototype.recv_plus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ThriftCalc.CalculatorService_plus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'plus failed: unknown result';
};
ThriftCalc.CalculatorServiceClient.prototype.minus = function(num1, num2, callback) {
  if (callback === undefined) {
    this.send_minus(num1, num2);
    return this.recv_minus();
  } else {
    var postData = this.send_minus(num1, num2, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_minus);
  }
};

ThriftCalc.CalculatorServiceClient.prototype.send_minus = function(num1, num2, callback) {
  this.output.writeMessageBegin('minus', Thrift.MessageType.CALL, this.seqid);
  var args = new ThriftCalc.CalculatorService_minus_args();
  args.num1 = num1;
  args.num2 = num2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ThriftCalc.CalculatorServiceClient.prototype.recv_minus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ThriftCalc.CalculatorService_minus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'minus failed: unknown result';
};
